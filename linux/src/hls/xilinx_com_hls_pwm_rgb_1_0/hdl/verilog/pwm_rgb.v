// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pwm_rgb,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.380000,HLS_SYN_LAT=10002,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=9,HLS_SYN_FF=476,HLS_SYN_LUT=452,HLS_VERSION=2018_3}" *)

module pwm_rgb (
        ap_clk,
        ap_rst_n,
        rgb_V,
        s_axi_AXIL_CTL_AWVALID,
        s_axi_AXIL_CTL_AWREADY,
        s_axi_AXIL_CTL_AWADDR,
        s_axi_AXIL_CTL_WVALID,
        s_axi_AXIL_CTL_WREADY,
        s_axi_AXIL_CTL_WDATA,
        s_axi_AXIL_CTL_WSTRB,
        s_axi_AXIL_CTL_ARVALID,
        s_axi_AXIL_CTL_ARREADY,
        s_axi_AXIL_CTL_ARADDR,
        s_axi_AXIL_CTL_RVALID,
        s_axi_AXIL_CTL_RREADY,
        s_axi_AXIL_CTL_RDATA,
        s_axi_AXIL_CTL_RRESP,
        s_axi_AXIL_CTL_BVALID,
        s_axi_AXIL_CTL_BREADY,
        s_axi_AXIL_CTL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;
parameter    C_S_AXI_AXIL_CTL_DATA_WIDTH = 32;
parameter    C_S_AXI_AXIL_CTL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXIL_CTL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [2:0] rgb_V;
input   s_axi_AXIL_CTL_AWVALID;
output   s_axi_AXIL_CTL_AWREADY;
input  [C_S_AXI_AXIL_CTL_ADDR_WIDTH - 1:0] s_axi_AXIL_CTL_AWADDR;
input   s_axi_AXIL_CTL_WVALID;
output   s_axi_AXIL_CTL_WREADY;
input  [C_S_AXI_AXIL_CTL_DATA_WIDTH - 1:0] s_axi_AXIL_CTL_WDATA;
input  [C_S_AXI_AXIL_CTL_WSTRB_WIDTH - 1:0] s_axi_AXIL_CTL_WSTRB;
input   s_axi_AXIL_CTL_ARVALID;
output   s_axi_AXIL_CTL_ARREADY;
input  [C_S_AXI_AXIL_CTL_ADDR_WIDTH - 1:0] s_axi_AXIL_CTL_ARADDR;
output   s_axi_AXIL_CTL_RVALID;
input   s_axi_AXIL_CTL_RREADY;
output  [C_S_AXI_AXIL_CTL_DATA_WIDTH - 1:0] s_axi_AXIL_CTL_RDATA;
output  [1:0] s_axi_AXIL_CTL_RRESP;
output   s_axi_AXIL_CTL_BVALID;
input   s_axi_AXIL_CTL_BREADY;
output  [1:0] s_axi_AXIL_CTL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [0:0] tmp_6_fu_208_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] duty_r;
wire   [7:0] duty_g;
wire   [7:0] duty_b;
reg   [0:0] do_init_reg_93;
reg   [0:0] do_init_reg_93_pp0_iter2_reg;
reg   [13:0] i7_reg_109;
reg   [13:0] i7_reg_109_pp0_iter1_reg;
reg   [13:0] i7_reg_109_pp0_iter2_reg;
reg   [13:0] pwm_rgb_unsigned_cha_6_reg_124;
reg   [13:0] pwm_rgb_unsigned_cha_7_reg_138;
reg   [13:0] pwm_rgb_unsigned_cha_8_reg_152;
wire   [13:0] i_fu_202_p2;
reg   [13:0] i_reg_332;
reg   [0:0] tmp_6_reg_337;
reg   [0:0] tmp_6_reg_337_pp0_iter1_reg;
reg   [0:0] tmp_6_reg_337_pp0_iter2_reg;
wire   [21:0] tmp_1_fu_314_p2;
reg   [21:0] tmp_1_reg_341;
reg   [0:0] ap_phi_mux_do_init_phi_fu_97_p6;
wire   [21:0] tmp_3_fu_320_p2;
reg   [21:0] tmp_3_reg_346;
wire   [21:0] tmp_5_fu_326_p2;
reg   [21:0] tmp_5_reg_351;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg   [13:0] ap_phi_mux_i7_phi_fu_113_p6;
reg   [13:0] ap_phi_mux_pwm_rgb_unsigned_cha_3_phi_fu_170_p4;
reg   [13:0] ap_phi_mux_pwm_rgb_unsigned_cha_4_phi_fu_182_p4;
reg   [13:0] ap_phi_mux_pwm_rgb_unsigned_cha_5_phi_fu_194_p4;
wire   [13:0] ap_phi_reg_pp0_iter0_pwm_rgb_unsigned_cha_3_reg_166;
reg   [13:0] ap_phi_reg_pp0_iter1_pwm_rgb_unsigned_cha_3_reg_166;
reg   [13:0] ap_phi_reg_pp0_iter2_pwm_rgb_unsigned_cha_3_reg_166;
reg   [13:0] ap_phi_reg_pp0_iter3_pwm_rgb_unsigned_cha_3_reg_166;
wire   [13:0] ap_phi_reg_pp0_iter0_pwm_rgb_unsigned_cha_4_reg_178;
reg   [13:0] ap_phi_reg_pp0_iter1_pwm_rgb_unsigned_cha_4_reg_178;
reg   [13:0] ap_phi_reg_pp0_iter2_pwm_rgb_unsigned_cha_4_reg_178;
reg   [13:0] ap_phi_reg_pp0_iter3_pwm_rgb_unsigned_cha_4_reg_178;
wire   [13:0] ap_phi_reg_pp0_iter0_pwm_rgb_unsigned_cha_5_reg_190;
reg   [13:0] ap_phi_reg_pp0_iter1_pwm_rgb_unsigned_cha_5_reg_190;
reg   [13:0] ap_phi_reg_pp0_iter2_pwm_rgb_unsigned_cha_5_reg_190;
reg   [13:0] ap_phi_reg_pp0_iter3_pwm_rgb_unsigned_cha_5_reg_190;
wire    ap_block_pp0_stage0_01001;
wire   [21:0] mul5_fu_229_p0;
wire   [45:0] mul5_fu_229_p2;
wire   [21:0] mul2_fu_248_p0;
wire   [45:0] mul2_fu_248_p2;
wire   [21:0] mul_fu_267_p0;
wire   [45:0] mul_fu_267_p2;
wire   [0:0] b_V_fu_295_p2;
wire   [0:0] g_V_fu_289_p2;
wire   [0:0] r_V_fu_283_p2;
wire   [7:0] tmp_1_fu_314_p0;
wire   [14:0] tmp_1_fu_314_p1;
wire   [7:0] tmp_3_fu_320_p0;
wire   [14:0] tmp_3_fu_320_p1;
wire   [7:0] tmp_5_fu_326_p0;
wire   [14:0] tmp_5_fu_326_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [45:0] mul2_fu_248_p00;
wire   [45:0] mul5_fu_229_p00;
wire   [45:0] mul_fu_267_p00;
wire   [21:0] tmp_1_fu_314_p00;
wire   [21:0] tmp_3_fu_320_p00;
wire   [21:0] tmp_5_fu_326_p00;
reg    ap_condition_158;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

pwm_rgb_AXIL_CTL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXIL_CTL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXIL_CTL_DATA_WIDTH ))
pwm_rgb_AXIL_CTL_s_axi_U(
    .AWVALID(s_axi_AXIL_CTL_AWVALID),
    .AWREADY(s_axi_AXIL_CTL_AWREADY),
    .AWADDR(s_axi_AXIL_CTL_AWADDR),
    .WVALID(s_axi_AXIL_CTL_WVALID),
    .WREADY(s_axi_AXIL_CTL_WREADY),
    .WDATA(s_axi_AXIL_CTL_WDATA),
    .WSTRB(s_axi_AXIL_CTL_WSTRB),
    .ARVALID(s_axi_AXIL_CTL_ARVALID),
    .ARREADY(s_axi_AXIL_CTL_ARREADY),
    .ARADDR(s_axi_AXIL_CTL_ARADDR),
    .RVALID(s_axi_AXIL_CTL_RVALID),
    .RREADY(s_axi_AXIL_CTL_RREADY),
    .RDATA(s_axi_AXIL_CTL_RDATA),
    .RRESP(s_axi_AXIL_CTL_RRESP),
    .BVALID(s_axi_AXIL_CTL_BVALID),
    .BREADY(s_axi_AXIL_CTL_BREADY),
    .BRESP(s_axi_AXIL_CTL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .duty_r(duty_r),
    .duty_g(duty_g),
    .duty_b(duty_b)
);

pwm_rgb_mul_mul_8bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 22 ))
pwm_rgb_mul_mul_8bkb_U1(
    .din0(tmp_1_fu_314_p0),
    .din1(tmp_1_fu_314_p1),
    .dout(tmp_1_fu_314_p2)
);

pwm_rgb_mul_mul_8bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 22 ))
pwm_rgb_mul_mul_8bkb_U2(
    .din0(tmp_3_fu_320_p0),
    .din1(tmp_3_fu_320_p1),
    .dout(tmp_3_fu_320_p2)
);

pwm_rgb_mul_mul_8bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 22 ))
pwm_rgb_mul_mul_8bkb_U3(
    .din0(tmp_5_fu_326_p0),
    .din1(tmp_5_fu_326_p1),
    .dout(tmp_5_fu_326_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((do_init_reg_93 == 1'd1)) begin
            ap_phi_reg_pp0_iter3_pwm_rgb_unsigned_cha_3_reg_166 <= {{mul_fu_267_p2[43:30]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_pwm_rgb_unsigned_cha_3_reg_166 <= ap_phi_reg_pp0_iter2_pwm_rgb_unsigned_cha_3_reg_166;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((do_init_reg_93 == 1'd1)) begin
            ap_phi_reg_pp0_iter3_pwm_rgb_unsigned_cha_4_reg_178 <= {{mul2_fu_248_p2[43:30]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_pwm_rgb_unsigned_cha_4_reg_178 <= ap_phi_reg_pp0_iter2_pwm_rgb_unsigned_cha_4_reg_178;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((do_init_reg_93 == 1'd1)) begin
            ap_phi_reg_pp0_iter3_pwm_rgb_unsigned_cha_5_reg_190 <= {{mul5_fu_229_p2[43:30]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_pwm_rgb_unsigned_cha_5_reg_190 <= ap_phi_reg_pp0_iter2_pwm_rgb_unsigned_cha_5_reg_190;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_6_reg_337_pp0_iter1_reg == 1'd0))) begin
        do_init_reg_93 <= 1'd0;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (tmp_6_reg_337_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        do_init_reg_93 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_6_reg_337 == 1'd0))) begin
        i7_reg_109 <= i_reg_332;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (tmp_6_reg_337 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        i7_reg_109 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_pwm_rgb_unsigned_cha_3_reg_166 <= ap_phi_reg_pp0_iter0_pwm_rgb_unsigned_cha_3_reg_166;
        ap_phi_reg_pp0_iter1_pwm_rgb_unsigned_cha_4_reg_178 <= ap_phi_reg_pp0_iter0_pwm_rgb_unsigned_cha_4_reg_178;
        ap_phi_reg_pp0_iter1_pwm_rgb_unsigned_cha_5_reg_190 <= ap_phi_reg_pp0_iter0_pwm_rgb_unsigned_cha_5_reg_190;
        i_reg_332 <= i_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter2_pwm_rgb_unsigned_cha_3_reg_166 <= ap_phi_reg_pp0_iter1_pwm_rgb_unsigned_cha_3_reg_166;
        ap_phi_reg_pp0_iter2_pwm_rgb_unsigned_cha_4_reg_178 <= ap_phi_reg_pp0_iter1_pwm_rgb_unsigned_cha_4_reg_178;
        ap_phi_reg_pp0_iter2_pwm_rgb_unsigned_cha_5_reg_190 <= ap_phi_reg_pp0_iter1_pwm_rgb_unsigned_cha_5_reg_190;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        do_init_reg_93_pp0_iter2_reg <= do_init_reg_93;
        i7_reg_109_pp0_iter2_reg <= i7_reg_109_pp0_iter1_reg;
        tmp_6_reg_337_pp0_iter2_reg <= tmp_6_reg_337_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i7_reg_109_pp0_iter1_reg <= i7_reg_109;
        tmp_6_reg_337 <= tmp_6_fu_208_p2;
        tmp_6_reg_337_pp0_iter1_reg <= tmp_6_reg_337;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_6_reg_337_pp0_iter2_reg == 1'd0))) begin
        pwm_rgb_unsigned_cha_6_reg_124 <= ap_phi_mux_pwm_rgb_unsigned_cha_3_phi_fu_170_p4;
        pwm_rgb_unsigned_cha_7_reg_138 <= ap_phi_mux_pwm_rgb_unsigned_cha_4_phi_fu_182_p4;
        pwm_rgb_unsigned_cha_8_reg_152 <= ap_phi_mux_pwm_rgb_unsigned_cha_5_phi_fu_194_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_do_init_phi_fu_97_p6 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_reg_341 <= tmp_1_fu_314_p2;
        tmp_3_reg_346 <= tmp_3_fu_320_p2;
        tmp_5_reg_351 <= tmp_5_fu_326_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_6_reg_337_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((tmp_6_reg_337_pp0_iter1_reg == 1'd1)) begin
            ap_phi_mux_do_init_phi_fu_97_p6 = 1'd1;
        end else if ((tmp_6_reg_337_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_do_init_phi_fu_97_p6 = 1'd0;
        end else begin
            ap_phi_mux_do_init_phi_fu_97_p6 = do_init_reg_93;
        end
    end else begin
        ap_phi_mux_do_init_phi_fu_97_p6 = do_init_reg_93;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_158)) begin
        if ((tmp_6_reg_337 == 1'd1)) begin
            ap_phi_mux_i7_phi_fu_113_p6 = 14'd0;
        end else if ((tmp_6_reg_337 == 1'd0)) begin
            ap_phi_mux_i7_phi_fu_113_p6 = i_reg_332;
        end else begin
            ap_phi_mux_i7_phi_fu_113_p6 = i7_reg_109;
        end
    end else begin
        ap_phi_mux_i7_phi_fu_113_p6 = i7_reg_109;
    end
end

always @ (*) begin
    if (((do_init_reg_93_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_pwm_rgb_unsigned_cha_3_phi_fu_170_p4 = pwm_rgb_unsigned_cha_6_reg_124;
    end else begin
        ap_phi_mux_pwm_rgb_unsigned_cha_3_phi_fu_170_p4 = ap_phi_reg_pp0_iter3_pwm_rgb_unsigned_cha_3_reg_166;
    end
end

always @ (*) begin
    if (((do_init_reg_93_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_pwm_rgb_unsigned_cha_4_phi_fu_182_p4 = pwm_rgb_unsigned_cha_7_reg_138;
    end else begin
        ap_phi_mux_pwm_rgb_unsigned_cha_4_phi_fu_182_p4 = ap_phi_reg_pp0_iter3_pwm_rgb_unsigned_cha_4_reg_178;
    end
end

always @ (*) begin
    if (((do_init_reg_93_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_pwm_rgb_unsigned_cha_5_phi_fu_194_p4 = pwm_rgb_unsigned_cha_8_reg_152;
    end else begin
        ap_phi_mux_pwm_rgb_unsigned_cha_5_phi_fu_194_p4 = ap_phi_reg_pp0_iter3_pwm_rgb_unsigned_cha_5_reg_190;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_6_fu_208_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_158 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_pwm_rgb_unsigned_cha_3_reg_166 = 'bx;

assign ap_phi_reg_pp0_iter0_pwm_rgb_unsigned_cha_4_reg_178 = 'bx;

assign ap_phi_reg_pp0_iter0_pwm_rgb_unsigned_cha_5_reg_190 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_V_fu_295_p2 = ((i7_reg_109_pp0_iter2_reg < ap_phi_mux_pwm_rgb_unsigned_cha_3_phi_fu_170_p4) ? 1'b1 : 1'b0);

assign g_V_fu_289_p2 = ((i7_reg_109_pp0_iter2_reg < ap_phi_mux_pwm_rgb_unsigned_cha_4_phi_fu_182_p4) ? 1'b1 : 1'b0);

assign i_fu_202_p2 = (ap_phi_mux_i7_phi_fu_113_p6 + 14'd1);

assign mul2_fu_248_p0 = mul2_fu_248_p00;

assign mul2_fu_248_p00 = tmp_3_reg_346;

assign mul2_fu_248_p2 = (mul2_fu_248_p0 * $signed('h404041));

assign mul5_fu_229_p0 = mul5_fu_229_p00;

assign mul5_fu_229_p00 = tmp_1_reg_341;

assign mul5_fu_229_p2 = (mul5_fu_229_p0 * $signed('h404041));

assign mul_fu_267_p0 = mul_fu_267_p00;

assign mul_fu_267_p00 = tmp_5_reg_351;

assign mul_fu_267_p2 = (mul_fu_267_p0 * $signed('h404041));

assign r_V_fu_283_p2 = ((i7_reg_109_pp0_iter2_reg < ap_phi_mux_pwm_rgb_unsigned_cha_5_phi_fu_194_p4) ? 1'b1 : 1'b0);

assign rgb_V = {{{b_V_fu_295_p2}, {g_V_fu_289_p2}}, {r_V_fu_283_p2}};

assign tmp_1_fu_314_p0 = tmp_1_fu_314_p00;

assign tmp_1_fu_314_p00 = duty_r;

assign tmp_1_fu_314_p1 = 22'd10000;

assign tmp_3_fu_320_p0 = tmp_3_fu_320_p00;

assign tmp_3_fu_320_p00 = duty_g;

assign tmp_3_fu_320_p1 = 22'd10000;

assign tmp_5_fu_326_p0 = tmp_5_fu_326_p00;

assign tmp_5_fu_326_p00 = duty_b;

assign tmp_5_fu_326_p1 = 22'd10000;

assign tmp_6_fu_208_p2 = ((ap_phi_mux_i7_phi_fu_113_p6 == 14'd9999) ? 1'b1 : 1'b0);

endmodule //pwm_rgb
