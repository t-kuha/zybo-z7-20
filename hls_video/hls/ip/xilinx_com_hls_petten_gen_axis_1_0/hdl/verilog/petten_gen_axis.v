// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="petten_gen_axis,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=6.700000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.211250,HLS_SYN_LAT=2073600,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=147,HLS_SYN_LUT=394,HLS_VERSION=2018_3}" *)

module petten_gen_axis (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_r_TREADY,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TUSER,
        out_r_TLAST,
        out_r_TID,
        out_r_TDEST
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   out_r_TREADY;
output  [23:0] out_r_TDATA;
output   out_r_TVALID;
output  [2:0] out_r_TKEEP;
output  [2:0] out_r_TSTRB;
output  [0:0] out_r_TUSER;
output  [0:0] out_r_TLAST;
output  [0:0] out_r_TID;
output  [0:0] out_r_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] exitcond_flatten_fu_231_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    out_V_data_V_1_ack_in;
wire    out_V_keep_V_1_ack_in;
wire    out_V_strb_V_1_ack_in;
wire    out_V_user_V_1_ack_in;
wire    out_V_last_V_1_ack_in;
wire    out_V_id_V_1_ack_in;
wire    out_V_dest_V_1_ack_in;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [23:0] out_V_data_V_1_data_out;
reg    out_V_data_V_1_vld_in;
wire    out_V_data_V_1_vld_out;
wire    out_V_data_V_1_ack_out;
reg   [23:0] out_V_data_V_1_payload_A;
reg   [23:0] out_V_data_V_1_payload_B;
reg    out_V_data_V_1_sel_rd;
reg    out_V_data_V_1_sel_wr;
wire    out_V_data_V_1_sel;
wire    out_V_data_V_1_load_A;
wire    out_V_data_V_1_load_B;
reg   [1:0] out_V_data_V_1_state;
wire    out_V_data_V_1_state_cmp_full;
wire   [2:0] out_V_keep_V_1_data_out;
reg    out_V_keep_V_1_vld_in;
wire    out_V_keep_V_1_vld_out;
wire    out_V_keep_V_1_ack_out;
reg    out_V_keep_V_1_sel_rd;
wire    out_V_keep_V_1_sel;
reg   [1:0] out_V_keep_V_1_state;
wire   [2:0] out_V_strb_V_1_data_out;
reg    out_V_strb_V_1_vld_in;
wire    out_V_strb_V_1_vld_out;
wire    out_V_strb_V_1_ack_out;
reg    out_V_strb_V_1_sel_rd;
wire    out_V_strb_V_1_sel;
reg   [1:0] out_V_strb_V_1_state;
reg   [0:0] out_V_user_V_1_data_out;
reg    out_V_user_V_1_vld_in;
wire    out_V_user_V_1_vld_out;
wire    out_V_user_V_1_ack_out;
reg   [0:0] out_V_user_V_1_payload_A;
reg   [0:0] out_V_user_V_1_payload_B;
reg    out_V_user_V_1_sel_rd;
reg    out_V_user_V_1_sel_wr;
wire    out_V_user_V_1_sel;
wire    out_V_user_V_1_load_A;
wire    out_V_user_V_1_load_B;
reg   [1:0] out_V_user_V_1_state;
wire    out_V_user_V_1_state_cmp_full;
reg   [0:0] out_V_last_V_1_data_out;
reg    out_V_last_V_1_vld_in;
wire    out_V_last_V_1_vld_out;
wire    out_V_last_V_1_ack_out;
reg   [0:0] out_V_last_V_1_payload_A;
reg   [0:0] out_V_last_V_1_payload_B;
reg    out_V_last_V_1_sel_rd;
reg    out_V_last_V_1_sel_wr;
wire    out_V_last_V_1_sel;
wire    out_V_last_V_1_load_A;
wire    out_V_last_V_1_load_B;
reg   [1:0] out_V_last_V_1_state;
wire    out_V_last_V_1_state_cmp_full;
wire   [0:0] out_V_id_V_1_data_out;
reg    out_V_id_V_1_vld_in;
wire    out_V_id_V_1_vld_out;
wire    out_V_id_V_1_ack_out;
reg    out_V_id_V_1_sel_rd;
wire    out_V_id_V_1_sel;
reg   [1:0] out_V_id_V_1_state;
wire   [0:0] out_V_dest_V_1_data_out;
reg    out_V_dest_V_1_vld_in;
wire    out_V_dest_V_1_vld_out;
wire    out_V_dest_V_1_ack_out;
reg    out_V_dest_V_1_sel_rd;
wire    out_V_dest_V_1_sel;
reg   [1:0] out_V_dest_V_1_state;
reg    out_r_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_s_reg_123;
reg   [0:0] tmp_user_V_s_reg_137;
reg   [10:0] t_V3_reg_155;
reg   [20:0] indvar_flatten2_reg_169;
wire   [0:0] tmp_last_V_fu_191_p2;
wire   [23:0] axi_data_V_fu_202_p4;
wire   [10:0] t_V_fu_213_p2;
reg   [10:0] t_V_reg_249;
wire   [20:0] indvar_flatten_next_fu_219_p2;
reg   [20:0] indvar_flatten_next_reg_254;
wire   [0:0] tmp_1_fu_225_p2;
reg   [0:0] tmp_1_reg_259;
reg   [0:0] exitcond_flatten_reg_264;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_tmp_s_phi_fu_127_p6;
reg   [0:0] ap_phi_mux_tmp_user_V_s_phi_fu_142_p6;
reg   [10:0] ap_phi_mux_t_V3_phi_fu_159_p6;
reg   [20:0] ap_phi_mux_indvar_flatten2_phi_fu_173_p6;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] t_V_1_mid2_fu_183_p3;
wire   [7:0] tmp_V_fu_198_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_474;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 out_V_data_V_1_sel_rd = 1'b0;
#0 out_V_data_V_1_sel_wr = 1'b0;
#0 out_V_data_V_1_state = 2'd0;
#0 out_V_keep_V_1_sel_rd = 1'b0;
#0 out_V_keep_V_1_state = 2'd0;
#0 out_V_strb_V_1_sel_rd = 1'b0;
#0 out_V_strb_V_1_state = 2'd0;
#0 out_V_user_V_1_sel_rd = 1'b0;
#0 out_V_user_V_1_sel_wr = 1'b0;
#0 out_V_user_V_1_state = 2'd0;
#0 out_V_last_V_1_sel_rd = 1'b0;
#0 out_V_last_V_1_sel_wr = 1'b0;
#0 out_V_last_V_1_state = 2'd0;
#0 out_V_id_V_1_sel_rd = 1'b0;
#0 out_V_id_V_1_state = 2'd0;
#0 out_V_dest_V_1_sel_rd = 1'b0;
#0 out_V_dest_V_1_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_data_V_1_ack_out == 1'b1) & (out_V_data_V_1_vld_out == 1'b1))) begin
            out_V_data_V_1_sel_rd <= ~out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_data_V_1_vld_in == 1'b1) & (out_V_data_V_1_ack_in == 1'b1))) begin
            out_V_data_V_1_sel_wr <= ~out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_data_V_1_state == 2'd2) & (out_V_data_V_1_vld_in == 1'b0)) | ((out_V_data_V_1_state == 2'd3) & (out_V_data_V_1_vld_in == 1'b0) & (out_V_data_V_1_ack_out == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd2;
        end else if ((((out_V_data_V_1_state == 2'd1) & (out_V_data_V_1_ack_out == 1'b0)) | ((out_V_data_V_1_state == 2'd3) & (out_V_data_V_1_ack_out == 1'b0) & (out_V_data_V_1_vld_in == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd1;
        end else if (((~((out_V_data_V_1_vld_in == 1'b0) & (out_V_data_V_1_ack_out == 1'b1)) & ~((out_V_data_V_1_ack_out == 1'b0) & (out_V_data_V_1_vld_in == 1'b1)) & (out_V_data_V_1_state == 2'd3)) | ((out_V_data_V_1_state == 2'd1) & (out_V_data_V_1_ack_out == 1'b1)) | ((out_V_data_V_1_state == 2'd2) & (out_V_data_V_1_vld_in == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd3;
        end else begin
            out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_dest_V_1_ack_out == 1'b1) & (out_V_dest_V_1_vld_out == 1'b1))) begin
            out_V_dest_V_1_sel_rd <= ~out_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_dest_V_1_state == 2'd2) & (out_V_dest_V_1_vld_in == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_V_dest_V_1_vld_in == 1'b0) & (out_V_dest_V_1_ack_out == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd2;
        end else if ((((out_V_dest_V_1_state == 2'd1) & (out_V_dest_V_1_ack_out == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_V_dest_V_1_ack_out == 1'b0) & (out_V_dest_V_1_vld_in == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd1;
        end else if (((~((out_V_dest_V_1_vld_in == 1'b0) & (out_V_dest_V_1_ack_out == 1'b1)) & ~((out_V_dest_V_1_ack_out == 1'b0) & (out_V_dest_V_1_vld_in == 1'b1)) & (out_V_dest_V_1_state == 2'd3)) | ((out_V_dest_V_1_state == 2'd1) & (out_V_dest_V_1_ack_out == 1'b1)) | ((out_V_dest_V_1_state == 2'd2) & (out_V_dest_V_1_vld_in == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd3;
        end else begin
            out_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_id_V_1_ack_out == 1'b1) & (out_V_id_V_1_vld_out == 1'b1))) begin
            out_V_id_V_1_sel_rd <= ~out_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_id_V_1_state == 2'd2) & (out_V_id_V_1_vld_in == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_V_id_V_1_vld_in == 1'b0) & (out_V_id_V_1_ack_out == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd2;
        end else if ((((out_V_id_V_1_state == 2'd1) & (out_V_id_V_1_ack_out == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_V_id_V_1_ack_out == 1'b0) & (out_V_id_V_1_vld_in == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd1;
        end else if (((~((out_V_id_V_1_vld_in == 1'b0) & (out_V_id_V_1_ack_out == 1'b1)) & ~((out_V_id_V_1_ack_out == 1'b0) & (out_V_id_V_1_vld_in == 1'b1)) & (out_V_id_V_1_state == 2'd3)) | ((out_V_id_V_1_state == 2'd1) & (out_V_id_V_1_ack_out == 1'b1)) | ((out_V_id_V_1_state == 2'd2) & (out_V_id_V_1_vld_in == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd3;
        end else begin
            out_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_keep_V_1_ack_out == 1'b1) & (out_V_keep_V_1_vld_out == 1'b1))) begin
            out_V_keep_V_1_sel_rd <= ~out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_keep_V_1_state == 2'd2) & (out_V_keep_V_1_vld_in == 1'b0)) | ((out_V_keep_V_1_state == 2'd3) & (out_V_keep_V_1_vld_in == 1'b0) & (out_V_keep_V_1_ack_out == 1'b1)))) begin
            out_V_keep_V_1_state <= 2'd2;
        end else if ((((out_V_keep_V_1_state == 2'd1) & (out_V_keep_V_1_ack_out == 1'b0)) | ((out_V_keep_V_1_state == 2'd3) & (out_V_keep_V_1_ack_out == 1'b0) & (out_V_keep_V_1_vld_in == 1'b1)))) begin
            out_V_keep_V_1_state <= 2'd1;
        end else if (((~((out_V_keep_V_1_vld_in == 1'b0) & (out_V_keep_V_1_ack_out == 1'b1)) & ~((out_V_keep_V_1_ack_out == 1'b0) & (out_V_keep_V_1_vld_in == 1'b1)) & (out_V_keep_V_1_state == 2'd3)) | ((out_V_keep_V_1_state == 2'd1) & (out_V_keep_V_1_ack_out == 1'b1)) | ((out_V_keep_V_1_state == 2'd2) & (out_V_keep_V_1_vld_in == 1'b1)))) begin
            out_V_keep_V_1_state <= 2'd3;
        end else begin
            out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_last_V_1_ack_out == 1'b1) & (out_V_last_V_1_vld_out == 1'b1))) begin
            out_V_last_V_1_sel_rd <= ~out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_last_V_1_ack_in == 1'b1) & (out_V_last_V_1_vld_in == 1'b1))) begin
            out_V_last_V_1_sel_wr <= ~out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_last_V_1_state == 2'd2) & (out_V_last_V_1_vld_in == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_V_last_V_1_vld_in == 1'b0) & (out_V_last_V_1_ack_out == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd2;
        end else if ((((out_V_last_V_1_state == 2'd1) & (out_V_last_V_1_ack_out == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_V_last_V_1_ack_out == 1'b0) & (out_V_last_V_1_vld_in == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd1;
        end else if (((~((out_V_last_V_1_vld_in == 1'b0) & (out_V_last_V_1_ack_out == 1'b1)) & ~((out_V_last_V_1_ack_out == 1'b0) & (out_V_last_V_1_vld_in == 1'b1)) & (out_V_last_V_1_state == 2'd3)) | ((out_V_last_V_1_state == 2'd1) & (out_V_last_V_1_ack_out == 1'b1)) | ((out_V_last_V_1_state == 2'd2) & (out_V_last_V_1_vld_in == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd3;
        end else begin
            out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_strb_V_1_ack_out == 1'b1) & (out_V_strb_V_1_vld_out == 1'b1))) begin
            out_V_strb_V_1_sel_rd <= ~out_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_strb_V_1_state == 2'd2) & (out_V_strb_V_1_vld_in == 1'b0)) | ((out_V_strb_V_1_state == 2'd3) & (out_V_strb_V_1_vld_in == 1'b0) & (out_V_strb_V_1_ack_out == 1'b1)))) begin
            out_V_strb_V_1_state <= 2'd2;
        end else if ((((out_V_strb_V_1_state == 2'd1) & (out_V_strb_V_1_ack_out == 1'b0)) | ((out_V_strb_V_1_state == 2'd3) & (out_V_strb_V_1_ack_out == 1'b0) & (out_V_strb_V_1_vld_in == 1'b1)))) begin
            out_V_strb_V_1_state <= 2'd1;
        end else if (((~((out_V_strb_V_1_vld_in == 1'b0) & (out_V_strb_V_1_ack_out == 1'b1)) & ~((out_V_strb_V_1_ack_out == 1'b0) & (out_V_strb_V_1_vld_in == 1'b1)) & (out_V_strb_V_1_state == 2'd3)) | ((out_V_strb_V_1_state == 2'd1) & (out_V_strb_V_1_ack_out == 1'b1)) | ((out_V_strb_V_1_state == 2'd2) & (out_V_strb_V_1_vld_in == 1'b1)))) begin
            out_V_strb_V_1_state <= 2'd3;
        end else begin
            out_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_user_V_1_ack_out == 1'b1) & (out_V_user_V_1_vld_out == 1'b1))) begin
            out_V_user_V_1_sel_rd <= ~out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_user_V_1_ack_in == 1'b1) & (out_V_user_V_1_vld_in == 1'b1))) begin
            out_V_user_V_1_sel_wr <= ~out_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_user_V_1_state == 2'd2) & (out_V_user_V_1_vld_in == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_V_user_V_1_vld_in == 1'b0) & (out_V_user_V_1_ack_out == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd2;
        end else if ((((out_V_user_V_1_state == 2'd1) & (out_V_user_V_1_ack_out == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_V_user_V_1_ack_out == 1'b0) & (out_V_user_V_1_vld_in == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd1;
        end else if (((~((out_V_user_V_1_vld_in == 1'b0) & (out_V_user_V_1_ack_out == 1'b1)) & ~((out_V_user_V_1_ack_out == 1'b0) & (out_V_user_V_1_vld_in == 1'b1)) & (out_V_user_V_1_state == 2'd3)) | ((out_V_user_V_1_state == 2'd1) & (out_V_user_V_1_ack_out == 1'b1)) | ((out_V_user_V_1_state == 2'd2) & (out_V_user_V_1_vld_in == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd3;
        end else begin
            out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten2_reg_169 <= indvar_flatten_next_reg_254;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_264 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        indvar_flatten2_reg_169 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_V3_reg_155 <= t_V_reg_249;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_264 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        t_V3_reg_155 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_s_reg_123 <= tmp_1_reg_259;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_264 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        tmp_s_reg_123 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_user_V_s_reg_137 <= 1'd0;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_264 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        tmp_user_V_s_reg_137 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_264 <= exitcond_flatten_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_next_reg_254 <= indvar_flatten_next_fu_219_p2;
        t_V_reg_249 <= t_V_fu_213_p2;
        tmp_1_reg_259 <= tmp_1_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_data_V_1_load_A == 1'b1)) begin
        out_V_data_V_1_payload_A <= axi_data_V_fu_202_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_data_V_1_load_B == 1'b1)) begin
        out_V_data_V_1_payload_B <= axi_data_V_fu_202_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_last_V_1_load_A == 1'b1)) begin
        out_V_last_V_1_payload_A <= tmp_last_V_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_last_V_1_load_B == 1'b1)) begin
        out_V_last_V_1_payload_B <= tmp_last_V_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_user_V_1_load_A == 1'b1)) begin
        out_V_user_V_1_payload_A <= ap_phi_mux_tmp_user_V_s_phi_fu_142_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_user_V_1_load_B == 1'b1)) begin
        out_V_user_V_1_payload_B <= ap_phi_mux_tmp_user_V_s_phi_fu_142_p6;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_264 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_474)) begin
        if ((exitcond_flatten_reg_264 == 1'd1)) begin
            ap_phi_mux_indvar_flatten2_phi_fu_173_p6 = 21'd0;
        end else if ((exitcond_flatten_reg_264 == 1'd0)) begin
            ap_phi_mux_indvar_flatten2_phi_fu_173_p6 = indvar_flatten_next_reg_254;
        end else begin
            ap_phi_mux_indvar_flatten2_phi_fu_173_p6 = indvar_flatten2_reg_169;
        end
    end else begin
        ap_phi_mux_indvar_flatten2_phi_fu_173_p6 = indvar_flatten2_reg_169;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_474)) begin
        if ((exitcond_flatten_reg_264 == 1'd1)) begin
            ap_phi_mux_t_V3_phi_fu_159_p6 = 11'd0;
        end else if ((exitcond_flatten_reg_264 == 1'd0)) begin
            ap_phi_mux_t_V3_phi_fu_159_p6 = t_V_reg_249;
        end else begin
            ap_phi_mux_t_V3_phi_fu_159_p6 = t_V3_reg_155;
        end
    end else begin
        ap_phi_mux_t_V3_phi_fu_159_p6 = t_V3_reg_155;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_474)) begin
        if ((exitcond_flatten_reg_264 == 1'd1)) begin
            ap_phi_mux_tmp_s_phi_fu_127_p6 = 1'd0;
        end else if ((exitcond_flatten_reg_264 == 1'd0)) begin
            ap_phi_mux_tmp_s_phi_fu_127_p6 = tmp_1_reg_259;
        end else begin
            ap_phi_mux_tmp_s_phi_fu_127_p6 = tmp_s_reg_123;
        end
    end else begin
        ap_phi_mux_tmp_s_phi_fu_127_p6 = tmp_s_reg_123;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_474)) begin
        if ((exitcond_flatten_reg_264 == 1'd1)) begin
            ap_phi_mux_tmp_user_V_s_phi_fu_142_p6 = 1'd1;
        end else if ((exitcond_flatten_reg_264 == 1'd0)) begin
            ap_phi_mux_tmp_user_V_s_phi_fu_142_p6 = 1'd0;
        end else begin
            ap_phi_mux_tmp_user_V_s_phi_fu_142_p6 = tmp_user_V_s_reg_137;
        end
    end else begin
        ap_phi_mux_tmp_user_V_s_phi_fu_142_p6 = tmp_user_V_s_reg_137;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_231_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((out_V_data_V_1_sel == 1'b1)) begin
        out_V_data_V_1_data_out = out_V_data_V_1_payload_B;
    end else begin
        out_V_data_V_1_data_out = out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_data_V_1_vld_in = 1'b1;
    end else begin
        out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_dest_V_1_vld_in = 1'b1;
    end else begin
        out_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_id_V_1_vld_in = 1'b1;
    end else begin
        out_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_V_last_V_1_sel == 1'b1)) begin
        out_V_last_V_1_data_out = out_V_last_V_1_payload_B;
    end else begin
        out_V_last_V_1_data_out = out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_last_V_1_vld_in = 1'b1;
    end else begin
        out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_strb_V_1_vld_in = 1'b1;
    end else begin
        out_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_V_user_V_1_sel == 1'b1)) begin
        out_V_user_V_1_data_out = out_V_user_V_1_payload_B;
    end else begin
        out_V_user_V_1_data_out = out_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_user_V_1_vld_in = 1'b1;
    end else begin
        out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_r_TDATA_blk_n = out_V_data_V_1_state[1'd1];
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0))) | ((out_V_data_V_1_ack_in == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0))) | ((out_V_data_V_1_ack_in == 1'b0) & (ap_start == 1'b1)));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_condition_474 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign axi_data_V_fu_202_p4 = {{{tmp_V_fu_198_p1}, {tmp_V_fu_198_p1}}, {tmp_V_fu_198_p1}};

assign exitcond_flatten_fu_231_p2 = ((ap_phi_mux_indvar_flatten2_phi_fu_173_p6 == 21'd2073599) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_219_p2 = (21'd1 + ap_phi_mux_indvar_flatten2_phi_fu_173_p6);

assign out_V_data_V_1_ack_in = out_V_data_V_1_state[1'd1];

assign out_V_data_V_1_ack_out = out_r_TREADY;

assign out_V_data_V_1_load_A = (out_V_data_V_1_state_cmp_full & ~out_V_data_V_1_sel_wr);

assign out_V_data_V_1_load_B = (out_V_data_V_1_state_cmp_full & out_V_data_V_1_sel_wr);

assign out_V_data_V_1_sel = out_V_data_V_1_sel_rd;

assign out_V_data_V_1_state_cmp_full = ((out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_data_V_1_vld_out = out_V_data_V_1_state[1'd0];

assign out_V_dest_V_1_ack_in = out_V_dest_V_1_state[1'd1];

assign out_V_dest_V_1_ack_out = out_r_TREADY;

assign out_V_dest_V_1_data_out = 1'd0;

assign out_V_dest_V_1_sel = out_V_dest_V_1_sel_rd;

assign out_V_dest_V_1_vld_out = out_V_dest_V_1_state[1'd0];

assign out_V_id_V_1_ack_in = out_V_id_V_1_state[1'd1];

assign out_V_id_V_1_ack_out = out_r_TREADY;

assign out_V_id_V_1_data_out = 1'd0;

assign out_V_id_V_1_sel = out_V_id_V_1_sel_rd;

assign out_V_id_V_1_vld_out = out_V_id_V_1_state[1'd0];

assign out_V_keep_V_1_ack_in = out_V_keep_V_1_state[1'd1];

assign out_V_keep_V_1_ack_out = out_r_TREADY;

assign out_V_keep_V_1_data_out = 3'd7;

assign out_V_keep_V_1_sel = out_V_keep_V_1_sel_rd;

assign out_V_keep_V_1_vld_out = out_V_keep_V_1_state[1'd0];

assign out_V_last_V_1_ack_in = out_V_last_V_1_state[1'd1];

assign out_V_last_V_1_ack_out = out_r_TREADY;

assign out_V_last_V_1_load_A = (out_V_last_V_1_state_cmp_full & ~out_V_last_V_1_sel_wr);

assign out_V_last_V_1_load_B = (out_V_last_V_1_state_cmp_full & out_V_last_V_1_sel_wr);

assign out_V_last_V_1_sel = out_V_last_V_1_sel_rd;

assign out_V_last_V_1_state_cmp_full = ((out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_last_V_1_vld_out = out_V_last_V_1_state[1'd0];

assign out_V_strb_V_1_ack_in = out_V_strb_V_1_state[1'd1];

assign out_V_strb_V_1_ack_out = out_r_TREADY;

assign out_V_strb_V_1_data_out = 3'd0;

assign out_V_strb_V_1_sel = out_V_strb_V_1_sel_rd;

assign out_V_strb_V_1_vld_out = out_V_strb_V_1_state[1'd0];

assign out_V_user_V_1_ack_in = out_V_user_V_1_state[1'd1];

assign out_V_user_V_1_ack_out = out_r_TREADY;

assign out_V_user_V_1_load_A = (out_V_user_V_1_state_cmp_full & ~out_V_user_V_1_sel_wr);

assign out_V_user_V_1_load_B = (out_V_user_V_1_state_cmp_full & out_V_user_V_1_sel_wr);

assign out_V_user_V_1_sel = out_V_user_V_1_sel_rd;

assign out_V_user_V_1_state_cmp_full = ((out_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_user_V_1_vld_out = out_V_user_V_1_state[1'd0];

assign out_r_TDATA = out_V_data_V_1_data_out;

assign out_r_TDEST = out_V_dest_V_1_data_out;

assign out_r_TID = out_V_id_V_1_data_out;

assign out_r_TKEEP = out_V_keep_V_1_data_out;

assign out_r_TLAST = out_V_last_V_1_data_out;

assign out_r_TSTRB = out_V_strb_V_1_data_out;

assign out_r_TUSER = out_V_user_V_1_data_out;

assign out_r_TVALID = out_V_dest_V_1_state[1'd0];

assign t_V_1_mid2_fu_183_p3 = ((ap_phi_mux_tmp_s_phi_fu_127_p6[0:0] === 1'b1) ? 11'd0 : ap_phi_mux_t_V3_phi_fu_159_p6);

assign t_V_fu_213_p2 = (11'd1 + t_V_1_mid2_fu_183_p3);

assign tmp_1_fu_225_p2 = ((t_V_fu_213_p2 == 11'd1920) ? 1'b1 : 1'b0);

assign tmp_V_fu_198_p1 = t_V_1_mid2_fu_183_p3[7:0];

assign tmp_last_V_fu_191_p2 = ((t_V_1_mid2_fu_183_p3 == 11'd1919) ? 1'b1 : 1'b0);

endmodule //petten_gen_axis
